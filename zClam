#!/bin/bash
#
#  zclam - fancy clamscan output with zenity
# 
#  2014 Konrad Merkel
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
# 
# 

### Config ###
scandir="$1"
detect_f="/tmp/zClamDetect"
log_f="/var/log/zClamDetect"
max_chars=1000
skip_freshclam=1

### Funktions ###

function notify_log # param: String notifiation-txt, String instance
{
	msg=$1
	instance=$2
	if [ "$instance" == "" ]; then
	  instance="zClam"
	fi
	echo $msg
	echo "`date +%d.%m.%y` `date +%H:%M:%S` $instance: $msg" >> $log_f
}

function run_freshclam # no param
{
  exec 3> >(zenity --progress --title="zClam - Freshclam" --percentage=0 --auto-close --width=600 --pulsate --text="Virendatenbank updaten")
  freshclam | xargs -l1 -I%% /bin/bash -c "echo \"freshclam: %%\"; echo \"`date +%d.%m.%y` `date +%H:%M:%S` freshclam: %%\" >> $log_f"
  exec 3>&-
}

### MAIN ###

#TODO: Prüfen, ob xServer (und zenity) verfügbar ist
#Am I root?
if [ $(id -u) -ne 0 ]; then
  echo "Please, run this script as root!"
  exit 1
fi

#Parse Args
#TODO: Wenn mehrere Argumente angegeben sind, dann alle parallel scanen in mehreren Prozessen und mit mehreren Log-Dateien
#TODO: Scip freshclam hinzufügen
#TODO: --no-root hinzufügen
if [ "$scandir" == "" ]; then
  scandir=`zenity --file-selection --directory`
fi

#Alte Scanergebnisse löschen
rm -f $detect_f 2>/dev/null

#Log Schreiben
echo "###############################" >> $log_f
notify_log "Start zClam"
notify_log "$scandir soll gescant werden"

#Virendatenbank updaten
if [ "$skip_freshclam" == 0 ]; then
  run_freshclam
fi

#Progressbar
exec 3> >(zenity --progress --title="zClam - ClamScan" --percentage=0 --auto-close --width=600)
echo "# Load ClamAV..." >&3

#Ermittle Anzahl an zu scannenden Dateien
fcount=$(find $scandir -type f | wc -l)
notify_log "$fcount Dateien in $scandir gefunden"

#Scannen
clamscan -r --no-summary $scandir | nl | awk -v fcount="$fcount" ' \
  /[0-9]+/ { \
    percent=$1/fcount*100; \
    print percent; \
    $1=""; print "#"$0 \
  } \
  $NF=="FOUND" { \
    printf $0"\n"  | "cat 1>&2" \
  } ' >&3 2>$detect_f
  
# Anstatt ... $NF=="FOUND" ... könnte man auch $NF!="OK" nehmen

#TODO: Virenfund in echtzeit anzeigen, nicht erst dannach!
#TODO: Auf Abbruch reagieren und den Script stoppen, bzw einen Verweis in der Log-Datei machen


#Prüfen, ob Viren gefunden wurden
errors=$(cat $detect_f )
if [ "$errors" != "" ]; then
  notify_log "Potentiell infizierte Dateien gefunden!"
  cat $detect_f
  cat $detect_f |  xargs -l1 -I%% echo "`date +%d.%m.%y` `date +%H:%M:%S` clamscan [FATAL]: %%" >> $log_f
  zenity --warning --text="Potentiell infizierte Dateien gefunden!\n`cat $detect_f`\n\nSee $log_f for more details." 2>/dev/null &
else
  notify_log "Glückwunsch! Es konnte nichts gefunden werden in $scandir." "clamscan"
  zenity --info --text="Glückwunsch! Es konnte nichts gefunden werden." 2>/dev/null &
fi

exec 3>&-

